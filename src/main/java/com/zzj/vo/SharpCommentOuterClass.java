package com.zzj.vo;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SharpComment.proto

public final class SharpCommentOuterClass {
  private SharpCommentOuterClass() {}
  public static void registerAllExtensions(
          com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
          com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
            (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SharpCommentsOrBuilder extends
          // @@protoc_insertion_point(interface_extends:SharpComments)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    java.util.List<SharpCommentOuterClass.SharpComment>
    getCommentsList();
    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    SharpCommentOuterClass.SharpComment getComments(int index);
    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    int getCommentsCount();
    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    java.util.List<? extends SharpCommentOuterClass.SharpCommentOrBuilder>
    getCommentsOrBuilderList();
    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    SharpCommentOuterClass.SharpCommentOrBuilder getCommentsOrBuilder(
            int index);
  }
  /**
   * Protobuf type {@code SharpComments}
   */
  public static final class SharpComments extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:SharpComments)
          SharpCommentsOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use SharpComments.newBuilder() to construct.
    private SharpComments(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SharpComments() {
      comments_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
      return new SharpComments();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SharpComments(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                comments_ = new java.util.ArrayList<SharpCommentOuterClass.SharpComment>();
                mutable_bitField0_ |= 0x00000001;
              }
              comments_.add(
                      input.readMessage(SharpCommentOuterClass.SharpComment.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                      input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          comments_ = java.util.Collections.unmodifiableList(comments_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return SharpCommentOuterClass.internal_static_SharpComments_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return SharpCommentOuterClass.internal_static_SharpComments_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      SharpCommentOuterClass.SharpComments.class, SharpCommentOuterClass.SharpComments.Builder.class);
    }

    public static final int COMMENTS_FIELD_NUMBER = 1;
    private java.util.List<SharpCommentOuterClass.SharpComment> comments_;
    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    @java.lang.Override
    public java.util.List<SharpCommentOuterClass.SharpComment> getCommentsList() {
      return comments_;
    }
    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends SharpCommentOuterClass.SharpCommentOrBuilder>
    getCommentsOrBuilderList() {
      return comments_;
    }
    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    @java.lang.Override
    public int getCommentsCount() {
      return comments_.size();
    }
    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    @java.lang.Override
    public SharpCommentOuterClass.SharpComment getComments(int index) {
      return comments_.get(index);
    }
    /**
     * <code>repeated .SharpComment comments = 1;</code>
     */
    @java.lang.Override
    public SharpCommentOuterClass.SharpCommentOrBuilder getCommentsOrBuilder(
            int index) {
      return comments_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      for (int i = 0; i < comments_.size(); i++) {
        output.writeMessage(1, comments_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < comments_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(1, comments_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof SharpCommentOuterClass.SharpComments)) {
        return super.equals(obj);
      }
      SharpCommentOuterClass.SharpComments other = (SharpCommentOuterClass.SharpComments) obj;

      if (!getCommentsList()
              .equals(other.getCommentsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCommentsCount() > 0) {
        hash = (37 * hash) + COMMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getCommentsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SharpCommentOuterClass.SharpComments parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SharpCommentOuterClass.SharpComments parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComments parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SharpCommentOuterClass.SharpComments parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComments parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SharpCommentOuterClass.SharpComments parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComments parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }
    public static SharpCommentOuterClass.SharpComments parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComments parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }
    public static SharpCommentOuterClass.SharpComments parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComments parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }
    public static SharpCommentOuterClass.SharpComments parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SharpCommentOuterClass.SharpComments prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SharpComments}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:SharpComments)
            SharpCommentOuterClass.SharpCommentsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return SharpCommentOuterClass.internal_static_SharpComments_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return SharpCommentOuterClass.internal_static_SharpComments_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        SharpCommentOuterClass.SharpComments.class, SharpCommentOuterClass.SharpComments.Builder.class);
      }

      // Construct using SharpCommentOuterClass.SharpComments.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCommentsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (commentsBuilder_ == null) {
          comments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          commentsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return SharpCommentOuterClass.internal_static_SharpComments_descriptor;
      }

      @java.lang.Override
      public SharpCommentOuterClass.SharpComments getDefaultInstanceForType() {
        return SharpCommentOuterClass.SharpComments.getDefaultInstance();
      }

      @java.lang.Override
      public SharpCommentOuterClass.SharpComments build() {
        SharpCommentOuterClass.SharpComments result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public SharpCommentOuterClass.SharpComments buildPartial() {
        SharpCommentOuterClass.SharpComments result = new SharpCommentOuterClass.SharpComments(this);
        int from_bitField0_ = bitField0_;
        if (commentsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            comments_ = java.util.Collections.unmodifiableList(comments_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.comments_ = comments_;
        } else {
          result.comments_ = commentsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SharpCommentOuterClass.SharpComments) {
          return mergeFrom((SharpCommentOuterClass.SharpComments)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SharpCommentOuterClass.SharpComments other) {
        if (other == SharpCommentOuterClass.SharpComments.getDefaultInstance()) return this;
        if (commentsBuilder_ == null) {
          if (!other.comments_.isEmpty()) {
            if (comments_.isEmpty()) {
              comments_ = other.comments_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCommentsIsMutable();
              comments_.addAll(other.comments_);
            }
            onChanged();
          }
        } else {
          if (!other.comments_.isEmpty()) {
            if (commentsBuilder_.isEmpty()) {
              commentsBuilder_.dispose();
              commentsBuilder_ = null;
              comments_ = other.comments_;
              bitField0_ = (bitField0_ & ~0x00000001);
              commentsBuilder_ =
                      com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                              getCommentsFieldBuilder() : null;
            } else {
              commentsBuilder_.addAllMessages(other.comments_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        SharpCommentOuterClass.SharpComments parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SharpCommentOuterClass.SharpComments) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<SharpCommentOuterClass.SharpComment> comments_ =
              java.util.Collections.emptyList();
      private void ensureCommentsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          comments_ = new java.util.ArrayList<SharpCommentOuterClass.SharpComment>(comments_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              SharpCommentOuterClass.SharpComment, SharpCommentOuterClass.SharpComment.Builder, SharpCommentOuterClass.SharpCommentOrBuilder> commentsBuilder_;

      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public java.util.List<SharpCommentOuterClass.SharpComment> getCommentsList() {
        if (commentsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(comments_);
        } else {
          return commentsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public int getCommentsCount() {
        if (commentsBuilder_ == null) {
          return comments_.size();
        } else {
          return commentsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public SharpCommentOuterClass.SharpComment getComments(int index) {
        if (commentsBuilder_ == null) {
          return comments_.get(index);
        } else {
          return commentsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public Builder setComments(
              int index, SharpCommentOuterClass.SharpComment value) {
        if (commentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommentsIsMutable();
          comments_.set(index, value);
          onChanged();
        } else {
          commentsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public Builder setComments(
              int index, SharpCommentOuterClass.SharpComment.Builder builderForValue) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          comments_.set(index, builderForValue.build());
          onChanged();
        } else {
          commentsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public Builder addComments(SharpCommentOuterClass.SharpComment value) {
        if (commentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommentsIsMutable();
          comments_.add(value);
          onChanged();
        } else {
          commentsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public Builder addComments(
              int index, SharpCommentOuterClass.SharpComment value) {
        if (commentsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommentsIsMutable();
          comments_.add(index, value);
          onChanged();
        } else {
          commentsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public Builder addComments(
              SharpCommentOuterClass.SharpComment.Builder builderForValue) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          comments_.add(builderForValue.build());
          onChanged();
        } else {
          commentsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public Builder addComments(
              int index, SharpCommentOuterClass.SharpComment.Builder builderForValue) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          comments_.add(index, builderForValue.build());
          onChanged();
        } else {
          commentsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public Builder addAllComments(
              java.lang.Iterable<? extends SharpCommentOuterClass.SharpComment> values) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, comments_);
          onChanged();
        } else {
          commentsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public Builder clearComments() {
        if (commentsBuilder_ == null) {
          comments_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          commentsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public Builder removeComments(int index) {
        if (commentsBuilder_ == null) {
          ensureCommentsIsMutable();
          comments_.remove(index);
          onChanged();
        } else {
          commentsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public SharpCommentOuterClass.SharpComment.Builder getCommentsBuilder(
              int index) {
        return getCommentsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public SharpCommentOuterClass.SharpCommentOrBuilder getCommentsOrBuilder(
              int index) {
        if (commentsBuilder_ == null) {
          return comments_.get(index);  } else {
          return commentsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public java.util.List<? extends SharpCommentOuterClass.SharpCommentOrBuilder>
      getCommentsOrBuilderList() {
        if (commentsBuilder_ != null) {
          return commentsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(comments_);
        }
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public SharpCommentOuterClass.SharpComment.Builder addCommentsBuilder() {
        return getCommentsFieldBuilder().addBuilder(
                SharpCommentOuterClass.SharpComment.getDefaultInstance());
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public SharpCommentOuterClass.SharpComment.Builder addCommentsBuilder(
              int index) {
        return getCommentsFieldBuilder().addBuilder(
                index, SharpCommentOuterClass.SharpComment.getDefaultInstance());
      }
      /**
       * <code>repeated .SharpComment comments = 1;</code>
       */
      public java.util.List<SharpCommentOuterClass.SharpComment.Builder>
      getCommentsBuilderList() {
        return getCommentsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
              SharpCommentOuterClass.SharpComment, SharpCommentOuterClass.SharpComment.Builder, SharpCommentOuterClass.SharpCommentOrBuilder>
      getCommentsFieldBuilder() {
        if (commentsBuilder_ == null) {
          commentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  SharpCommentOuterClass.SharpComment, SharpCommentOuterClass.SharpComment.Builder, SharpCommentOuterClass.SharpCommentOrBuilder>(
                  comments_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          comments_ = null;
        }
        return commentsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SharpComments)
    }

    // @@protoc_insertion_point(class_scope:SharpComments)
    private static final SharpCommentOuterClass.SharpComments DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SharpCommentOuterClass.SharpComments();
    }

    public static SharpCommentOuterClass.SharpComments getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SharpComments>
            PARSER = new com.google.protobuf.AbstractParser<SharpComments>() {
      @java.lang.Override
      public SharpComments parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new SharpComments(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SharpComments> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SharpComments> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public SharpCommentOuterClass.SharpComments getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SharpCommentOrBuilder extends
          // @@protoc_insertion_point(interface_extends:SharpComment)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string nick = 1;</code>
     * @return The nick.
     */
    java.lang.String getNick();
    /**
     * <code>string nick = 1;</code>
     * @return The bytes for nick.
     */
    com.google.protobuf.ByteString
    getNickBytes();

    /**
     * <code>int64 articleId = 2;</code>
     * @return The articleId.
     */
    long getArticleId();

    /**
     * <code>string content = 3;</code>
     * @return The content.
     */
    java.lang.String getContent();
    /**
     * <code>string content = 3;</code>
     * @return The bytes for content.
     */
    com.google.protobuf.ByteString
    getContentBytes();
  }
  /**
   * Protobuf type {@code SharpComment}
   */
  public static final class SharpComment extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:SharpComment)
          SharpCommentOrBuilder {
    private static final long serialVersionUID = 0L;
    // Use SharpComment.newBuilder() to construct.
    private SharpComment(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SharpComment() {
      nick_ = "";
      content_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
      return new SharpComment();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SharpComment(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              nick_ = s;
              break;
            }
            case 16: {

              articleId_ = input.readInt64();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              content_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                      input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return SharpCommentOuterClass.internal_static_SharpComment_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return SharpCommentOuterClass.internal_static_SharpComment_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      SharpCommentOuterClass.SharpComment.class, SharpCommentOuterClass.SharpComment.Builder.class);
    }

    public static final int NICK_FIELD_NUMBER = 1;
    private volatile java.lang.Object nick_;
    /**
     * <code>string nick = 1;</code>
     * @return The nick.
     */
    @java.lang.Override
    public java.lang.String getNick() {
      java.lang.Object ref = nick_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nick_ = s;
        return s;
      }
    }
    /**
     * <code>string nick = 1;</code>
     * @return The bytes for nick.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
    getNickBytes() {
      java.lang.Object ref = nick_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
        nick_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARTICLEID_FIELD_NUMBER = 2;
    private long articleId_;
    /**
     * <code>int64 articleId = 2;</code>
     * @return The articleId.
     */
    @java.lang.Override
    public long getArticleId() {
      return articleId_;
    }

    public static final int CONTENT_FIELD_NUMBER = 3;
    private volatile java.lang.Object content_;
    /**
     * <code>string content = 3;</code>
     * @return The content.
     */
    @java.lang.Override
    public java.lang.String getContent() {
      java.lang.Object ref = content_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        content_ = s;
        return s;
      }
    }
    /**
     * <code>string content = 3;</code>
     * @return The bytes for content.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
    getContentBytes() {
      java.lang.Object ref = content_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
                com.google.protobuf.ByteString.copyFromUtf8(
                        (java.lang.String) ref);
        content_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nick_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, nick_);
      }
      if (articleId_ != 0L) {
        output.writeInt64(2, articleId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(content_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, content_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(nick_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, nick_);
      }
      if (articleId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt64Size(2, articleId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(content_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, content_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof SharpCommentOuterClass.SharpComment)) {
        return super.equals(obj);
      }
      SharpCommentOuterClass.SharpComment other = (SharpCommentOuterClass.SharpComment) obj;

      if (!getNick()
              .equals(other.getNick())) return false;
      if (getArticleId()
              != other.getArticleId()) return false;
      if (!getContent()
              .equals(other.getContent())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NICK_FIELD_NUMBER;
      hash = (53 * hash) + getNick().hashCode();
      hash = (37 * hash) + ARTICLEID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getArticleId());
      hash = (37 * hash) + CONTENT_FIELD_NUMBER;
      hash = (53 * hash) + getContent().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SharpCommentOuterClass.SharpComment parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SharpCommentOuterClass.SharpComment parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComment parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SharpCommentOuterClass.SharpComment parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComment parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SharpCommentOuterClass.SharpComment parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComment parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }
    public static SharpCommentOuterClass.SharpComment parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComment parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }
    public static SharpCommentOuterClass.SharpComment parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SharpCommentOuterClass.SharpComment parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }
    public static SharpCommentOuterClass.SharpComment parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SharpCommentOuterClass.SharpComment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SharpComment}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:SharpComment)
            SharpCommentOuterClass.SharpCommentOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return SharpCommentOuterClass.internal_static_SharpComment_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return SharpCommentOuterClass.internal_static_SharpComment_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        SharpCommentOuterClass.SharpComment.class, SharpCommentOuterClass.SharpComment.Builder.class);
      }

      // Construct using SharpCommentOuterClass.SharpComment.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        nick_ = "";

        articleId_ = 0L;

        content_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return SharpCommentOuterClass.internal_static_SharpComment_descriptor;
      }

      @java.lang.Override
      public SharpCommentOuterClass.SharpComment getDefaultInstanceForType() {
        return SharpCommentOuterClass.SharpComment.getDefaultInstance();
      }

      @java.lang.Override
      public SharpCommentOuterClass.SharpComment build() {
        SharpCommentOuterClass.SharpComment result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public SharpCommentOuterClass.SharpComment buildPartial() {
        SharpCommentOuterClass.SharpComment result = new SharpCommentOuterClass.SharpComment(this);
        result.nick_ = nick_;
        result.articleId_ = articleId_;
        result.content_ = content_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SharpCommentOuterClass.SharpComment) {
          return mergeFrom((SharpCommentOuterClass.SharpComment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SharpCommentOuterClass.SharpComment other) {
        if (other == SharpCommentOuterClass.SharpComment.getDefaultInstance()) return this;
        if (!other.getNick().isEmpty()) {
          nick_ = other.nick_;
          onChanged();
        }
        if (other.getArticleId() != 0L) {
          setArticleId(other.getArticleId());
        }
        if (!other.getContent().isEmpty()) {
          content_ = other.content_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        SharpCommentOuterClass.SharpComment parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SharpCommentOuterClass.SharpComment) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object nick_ = "";
      /**
       * <code>string nick = 1;</code>
       * @return The nick.
       */
      public java.lang.String getNick() {
        java.lang.Object ref = nick_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          nick_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string nick = 1;</code>
       * @return The bytes for nick.
       */
      public com.google.protobuf.ByteString
      getNickBytes() {
        java.lang.Object ref = nick_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
                  com.google.protobuf.ByteString.copyFromUtf8(
                          (java.lang.String) ref);
          nick_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string nick = 1;</code>
       * @param value The nick to set.
       * @return This builder for chaining.
       */
      public Builder setNick(
              java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        nick_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string nick = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNick() {

        nick_ = getDefaultInstance().getNick();
        onChanged();
        return this;
      }
      /**
       * <code>string nick = 1;</code>
       * @param value The bytes for nick to set.
       * @return This builder for chaining.
       */
      public Builder setNickBytes(
              com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        nick_ = value;
        onChanged();
        return this;
      }

      private long articleId_ ;
      /**
       * <code>int64 articleId = 2;</code>
       * @return The articleId.
       */
      @java.lang.Override
      public long getArticleId() {
        return articleId_;
      }
      /**
       * <code>int64 articleId = 2;</code>
       * @param value The articleId to set.
       * @return This builder for chaining.
       */
      public Builder setArticleId(long value) {

        articleId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 articleId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearArticleId() {

        articleId_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object content_ = "";
      /**
       * <code>string content = 3;</code>
       * @return The content.
       */
      public java.lang.String getContent() {
        java.lang.Object ref = content_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          content_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string content = 3;</code>
       * @return The bytes for content.
       */
      public com.google.protobuf.ByteString
      getContentBytes() {
        java.lang.Object ref = content_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
                  com.google.protobuf.ByteString.copyFromUtf8(
                          (java.lang.String) ref);
          content_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string content = 3;</code>
       * @param value The content to set.
       * @return This builder for chaining.
       */
      public Builder setContent(
              java.lang.String value) {
        if (value == null) {
          throw new NullPointerException();
        }

        content_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string content = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearContent() {

        content_ = getDefaultInstance().getContent();
        onChanged();
        return this;
      }
      /**
       * <code>string content = 3;</code>
       * @param value The bytes for content to set.
       * @return This builder for chaining.
       */
      public Builder setContentBytes(
              com.google.protobuf.ByteString value) {
        if (value == null) {
          throw new NullPointerException();
        }
        checkByteStringIsUtf8(value);

        content_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SharpComment)
    }

    // @@protoc_insertion_point(class_scope:SharpComment)
    private static final SharpCommentOuterClass.SharpComment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SharpCommentOuterClass.SharpComment();
    }

    public static SharpCommentOuterClass.SharpComment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SharpComment>
            PARSER = new com.google.protobuf.AbstractParser<SharpComment>() {
      @java.lang.Override
      public SharpComment parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new SharpComment(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SharpComment> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SharpComment> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public SharpCommentOuterClass.SharpComment getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_SharpComments_descriptor;
  private static final
  com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internal_static_SharpComments_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
          internal_static_SharpComment_descriptor;
  private static final
  com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internal_static_SharpComment_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
  getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
          descriptor;
  static {
    java.lang.String[] descriptorData = {
            "\n\022SharpComment.proto\"0\n\rSharpComments\022\037\n" +
                    "\010comments\030\001 \003(\0132\r.SharpComment\"@\n\014SharpC" +
                    "omment\022\014\n\004nick\030\001 \001(\t\022\021\n\tarticleId\030\002 \001(\003\022" +
                    "\017\n\007content\030\003 \001(\tb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
            .internalBuildGeneratedFileFrom(descriptorData,
                    new com.google.protobuf.Descriptors.FileDescriptor[] {
                    });
    internal_static_SharpComments_descriptor =
            getDescriptor().getMessageTypes().get(0);
    internal_static_SharpComments_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_SharpComments_descriptor,
            new java.lang.String[] { "Comments", });
    internal_static_SharpComment_descriptor =
            getDescriptor().getMessageTypes().get(1);
    internal_static_SharpComment_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
            internal_static_SharpComment_descriptor,
            new java.lang.String[] { "Nick", "ArticleId", "Content", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
